package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;


/**
 * Created by shrey on 2017-11-05.
 */

@TeleOp(name="New TeleOp", group="group")

public class New_TeleOp extends LinearOpMode{

    // Declaring and defining the motors
    //Robot and Timer
    public static HardwarePushBot robot = new HardwarePushBot();
    public static ElapsedTime runTime = new ElapsedTime();

    //Drive
    public static DcMotor rightFrontDrive = null;
    public static DcMotor leftFrontDrive = null;
    public static DcMotor rightBackDrive = null;
    public static DcMotor leftBackDrive = null;
    //Relic claw
    //public static DcMotor clawArm = null;
    //public static DcMotor claw = null;
    //glyphlift subsystem
    //public static DcMotor glyphLift = null;
    //public static Servo glyphLiftRight = null;
    //public static Servo glyphLiftLeft = null;


    @Override
    public void runOpMode() throws InterruptedException {

        // Intialize the robot's hardware from HardwareMap amd allows you to run all this code within TeleOp
        robot.init(hardwareMap);

        telemetry.addData("Status", "Initialized");
        telemetry.addData("Hello Driver", "Press Play Button");
        telemetry.update();

        // This part is called intializing the variables or hardware elements

        // Drive
        rightFrontDrive = hardwareMap.dcMotor.get("rfd"); //0
        leftFrontDrive = hardwareMap.dcMotor.get("lfd");  //1
        rightBackDrive = hardwareMap.dcMotor.get("rbd");  //2
        leftBackDrive = hardwareMap.dcMotor.get("lbd");   //3

        // GlyphLift subsystem
        //glyphLift = hardwareMap.dcMotor.get ("gyl");      //1
        //glyphLiftRight = hardwareMap.servo.get("glr");    //0
        //glyphLiftLeft = hardwareMap.servo.get("gll");     //1

        // Claw system
        //claw = hardwareMap.dcMotor.get("claw");           //2
        //clawArm = hardwareMap.dcMotor.get("ca");          //0

        // Most robots need the motor on one side to be reversed to drive forward
        // Reverse the motor that runs backwards when connected directly to the battery
        //Drive Sub-system
        rightFrontDrive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        leftFrontDrive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        rightBackDrive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        leftBackDrive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        rightFrontDrive.setDirection(DcMotor.Direction.FORWARD);
        leftFrontDrive.setDirection(DcMotor.Direction.REVERSE);
        rightBackDrive.setDirection(DcMotor.Direction.FORWARD);
        leftBackDrive.setDirection(DcMotor.Direction.REVERSE);

        //glyphLiftRight.setPosition(0.5);
        //glyphLiftLeft.setPosition(0.5);

        //Claw system
        //claw.setDirection(DcMotor.Direction.FORWARD);
        //clawArm.setDirection(DcMotor.Direction.FORWARD);

        //claw.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        //claw.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Wait for the game to start (driver presses PLAY)
        waitForStart();
        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            // Setup a variable for each drive wheel to save power level for telemetry
            // Choose to drive using either Tank Mode, or POV Mode
            // Comment out the method that's not used.  The default below is POV.

            // Drive variables
            double rightPower = -gamepad1.right_stick_y;
            double leftPower = -gamepad1.left_stick_y;
            double reverse_Thres = -0.5;
            double forward_Thres = 0.5;

            // Glyph Lift system
            double liftPow = -gamepad2.right_stick_y;
            double up_Thres = 0.5;
            double down_Thres = -0.5;

            // Claw system
            double swingPow = gamepad2.left_stick_y;
            double downforward_Thres = 0.5;
            double upbackward_Thres = -0.5;


            // Send calculated power to wheels
            // Drive system
            if(rightPower < forward_Thres && rightPower > reverse_Thres && leftPower < forward_Thres && leftPower > reverse_Thres){
                DriveMethods.stopRightMotors();
                DriveMethods.stopLeftMotors();
            }else if(rightPower != 0.0 && leftPower != 0.0) {
                DriveMethods.driveRight(rightPower*0.8);
                DriveMethods.driveLeft(leftPower*0.8);
            }else if(rightPower != 0.0 && leftPower == 0.0){
                DriveMethods.driveRight(rightPower * 0.3);
            }else if(leftPower != 0.0 && rightPower == 0.0) {
                DriveMethods.driveLeft(leftPower * 0.3);
            }else if(rightPower < reverse_Thres && leftPower > forward_Thres){
                DriveMethods.driveLeft(leftPower * 0.3);
                DriveMethods.driveRight(rightPower * 0.3);
            }else if(rightPower > forward_Thres && leftPower < reverse_Thres){
                DriveMethods.driveLeft(leftPower * 0.3);
                DriveMethods.driveRight(rightPower * 0.3);
            }


            /*if (gamepad1.right_stick_y > reverse_Thres && gamepad1.right_stick_y < forward_Thres) {
                //stop all motors
                DriveMethods.stopMotors();
            }else if(gamepad1.right_stick_y < reverse_Thres) {//backward driving
                if (gamepad1.left_stick_x < left_Thres) {
                    //turning left
                    DriveMethods.turnLeft(power);
                } else if (gamepad1.left_stick_x > right_Thres) {
                    //turning Right
                    DriveMethods.turnRight(power);
                } else {
                    //driving backwards
                    DriveMethods.backwardDrive(power);
                }
            }else {//forward driving
                if (gamepad1.left_stick_x < left_Thres) {
                    //turning left
                    DriveMethods.turnLeft(-power);
                } else if (gamepad1.left_stick_x > right_Thres) {
                    //turning Right
                    DriveMethods.turnRight(-power);
                } else {
                    //driving straight
                    DriveMethods.forwardDrive(-power);
                }
            }*/
            // GlyphLift sub-system
            // Lifting glyph
            /*if(liftPow < up_Thres && liftPow > down_Thres) {
                DriveMethods.glyphLift(0);

            }else if(liftPow > up_Thres){
                DriveMethods.glyphLift(-liftPow * 0.2);

            }else{
                DriveMethods.glyphLift(liftPow * 0.2);
            }

            // Grabbing glyph
            if(gamepad2.a) {
                DriveMethods.openGlyph();
            }
            if(gamepad2.b){
                DriveMethods.closeGlyph();
            }*/

            // Claw sub-system
            // Claw arm
            /*if (gamepad2.left_stick_y < downforward_Thres && gamepad2.left_stick_y > upbackward_Thres) {
                DriveMethods.clawArmStop();
            }
            if (gamepad2.left_stick_y > downforward_Thres){
                DriveMethods.clawArmForward(-swingPow * 0.3);
            }
            if (gamepad2.left_stick_y < upbackward_Thres){
                DriveMethods.clawArmBackward(swingPow * 0.3);
            }*/

            // Claw to grab relic
            //if the y button on gamepad2 is pressed the claw will open
            /*if(gamepad2.x) {
                claw.setPower(0.15);
            }else if(gamepad2.y){
                claw.setPower(-0.15);
            }else{
                claw.setPower(0);
            }*/

            // Show the elapsed game time and wheel power.
            telemetry.addData("Status", "Run Time: " + runTime.toString());
            telemetry.addData("Motors", "power (%.2f)");
            telemetry.addData("Right_Stick_y", gamepad1.right_stick_y);
            telemetry.addData("Left_Stick_x", gamepad1.left_stick_x);
            telemetry.addData("Swing Power", swingPow);
            //telemetry.addData("Right Servo", glyphLiftRight.getPosition());
            //telemetry.addData("Left Servo", glyphLiftLeft.getPosition());
            telemetry.update();
        }
    }
}

