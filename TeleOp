package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

/**
 * Created by shrey on 2017-09-26.
 * This program intializes the motors before the TeleOp period, then takes input from the gamepad controllers
 * to drive the motors at a speed given by the driver
 * rightFrontDrive = right front motor
 * leftFrontDrive = left front motor
 * rightBackDrive = right back motor
 * leftBackDrive = left back motor
 */

@TeleOp(name="Test", group="group")

public class TeleOpMode extends LinearOpMode {

    // Intiallizing the Motors

    //Drive
    private HardwarePushBot robot = new HardwarePushBot();
    private ElapsedTime runTime =  new ElapsedTime();
    private DcMotor rightFrontDrive = null;
    private DcMotor leftFrontDrive = null;
    private DcMotor rightBackDrive = null;
    private DcMotor leftBackDrive = null;

    @Override
    public void runOpMode() throws InterruptedException{

        //Intialize the robot's hardware from HardwareMap
        robot.init(hardwareMap);

        telemetry.addData("Status", "Initialized");
        telemetry.addData("Hello Driver", "Press Play Button");
        telemetry.update();

        //Intialize Motors
        rightFrontDrive = hardwareMap.dcMotor.get("rfd"); //0
        leftFrontDrive = hardwareMap.dcMotor.get("lfd");  //1
        rightBackDrive = hardwareMap.dcMotor.get("rbd");  //2
        leftBackDrive = hardwareMap.dcMotor.get("lbd");   //3
        // Most robots need the motor on one side to be reversed to drive forward
        // Reverse the motor that runs backwards when connected directly to the battery
        //Drive Sub-system
        rightFrontDrive.setDirection(DcMotor.Direction.REVERSE);
        leftFrontDrive.setDirection(DcMotor.Direction.FORWARD);
        rightBackDrive.setDirection(DcMotor.Direction.REVERSE);
        leftBackDrive.setDirection(DcMotor.Direction.FORWARD);

        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            // Setup a variable for each drive wheel to save power level for telemetry
            // Choose to drive using either Tank Mode, or POV Mode
            // Comment out the method that's not used.  The default below is POV.

            // POV Mode uses left stick to go forward, and right stick to turn.
            // - This uses basic math to combine motions and is easier to drive straight.
            double drive = -gamepad1.left_stick_y;
            double turn  =  gamepad1.right_stick_x;
            double leftPower    = Range.clip(drive + turn, -1.0, 1.0) ;
            double rightPower   = Range.clip(drive - turn, -1.0, 1.0) ;

            // Tank Mode uses one stick to control each wheel.
            // - This requires no math, but it is hard to drive forward slowly and keep straight.
            //leftPower  = -gamepad1.left_stick_y ;
            //rightPower = -gamepad1.right_stick_y ;

            // Send calculated power to wheels
            rightFrontDrive.setPower(1.0);
            //leftFrontDrive.setPower(leftPower);
            //rightBackDrive.setPower(rightPower);
            //leftBackDrive.setPower(leftPower);

            // Show the elapsed game time and wheel power.
            telemetry.addData("Status", "Run Time: " + runTime.toString());
            telemetry.addData("Motors", "left (%.2f), right (%.2f)", leftPower, rightPower);
            telemetry.update();
        }
    }
}
