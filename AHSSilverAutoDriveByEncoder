package SilverBot;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;

/**
 * This file illustrates the concept of driving a path based on encoder counts.
 * It uses the common Pushbot hardware class to define the drive on the robot.
 * The code is structured as a LinearOpMode
 * <p>
 * The code is written using a method called: encoderDrive(speed, leftInches, rightInches, timeoutS)
 * that performs the actual movement.
 * This methods assumes that each movement is relative to the last stopping place.
 * There are other ways to perform encoder based moves, but this method is probably the simplest.
 * This code uses the RUN_TO_POSITION mode to enable the Motor controllers to generate the run profile
 * <p>
 * DC Motor #14-0019 motor picks/rev at shaft = 1478.4
 */

@Autonomous(name = "AHS Auto Drive", group = "SilverBot")
public class AHSSilverAutoDriveByEncoder extends LinearOpMode {

	/* Declare OpMode members. */
	AHSSilverRobot robot = new AHSSilverRobot();
	private ElapsedTime runtime = new ElapsedTime();

	static final double COUNTS_PER_MOTOR_SHAFT_REV = 1478.4;
	static final double WHEEL_DIAMETER_INCHES = 3.0;
	static final double RELATIVE_SCALING = 0.9699;

	static final double COUNTS_PER_INCH = (COUNTS_PER_MOTOR_SHAFT_REV) /
			(WHEEL_DIAMETER_INCHES *
					3.1415 *
					RELATIVE_SCALING);

	static final double DRIVE_SPEED = 0.2;
	static final double TURN_SPEED = 0.3;

	@Override
	public void runOpMode() {

        /*
         * Initialize the drive system variables.
         * The init() method of the hardware class does all the work here
         */
		robot.init(hardwareMap);

		// Send telemetry message to signify robot waiting;
		telemetry.addData("Status", "Resetting Encoders");
		telemetry.update();

		robot.leftDriveMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
		robot.rightDriveMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
		idle();

		robot.leftDriveMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
		robot.rightDriveMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

		// Send telemetry message to indicate successful Encoder reset
		telemetry.addData("Path0", "Starting at %7d :%7d",
				robot.leftDriveMotor.getCurrentPosition(),
				robot.rightDriveMotor.getCurrentPosition());
		telemetry.update();

		// Wait for the game to start (driver presses PLAY)
		waitForStart();

		// Step through each leg of the path,
		// Note: Reverse movement is obtained by setting a negative distance (not speed)
		encoderDrive(DRIVE_SPEED, 73, 73, 10.0);
//        encoderDrive(TURN_SPEED,   12, -12, 4.0);  // S2: Turn Right 12 Inches with 4 Sec timeout
//        encoderDrive(DRIVE_SPEED, -24, -24, 4.0);  // S3: Reverse 24 Inches with 4 Sec timeout

		telemetry.addData("Path", "Complete");
		telemetry.update();
	}

	/*
	 *  Method to perform a relative move, based on encoder counts.
	 *  Encoders are not reset as the move is based on the current position.
	 *  Move will stop if any of three conditions occur:
	 *  1) Move gets to the desired position
	 *  2) Move runs out of time
	 *  3) Driver stops the opmode running.
	 */
	public void encoderDrive(double speed,
	                         double leftInches,
	                         double rightInches,
	                         double timeoutS) {
		int newLeftTarget;
		int newRightTarget;

		// Ensure that the opmode is still active
		if (opModeIsActive()) {

			// Determine new target position, and pass to motor controller
			newLeftTarget = robot.leftDriveMotor.getCurrentPosition() +
					(int) (leftInches * COUNTS_PER_INCH * -1.0);
			newRightTarget = robot.rightDriveMotor.getCurrentPosition() +
					(int) (rightInches * COUNTS_PER_INCH);
			robot.leftDriveMotor.setTargetPosition(newLeftTarget);
			robot.rightDriveMotor.setTargetPosition(newRightTarget);

			// Turn On RUN_TO_POSITION
			robot.leftDriveMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
			robot.rightDriveMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);

			// reset the timeout time and start motion.
			runtime.reset();
			robot.leftDriveMotor.setPower(Math.abs(speed));
			robot.rightDriveMotor.setPower(Math.abs(speed));

			// keep looping while we are still active, and there is time left, and both motors are running.
			while (opModeIsActive() &&
					(runtime.seconds() < timeoutS) &&
					(robot.leftDriveMotor.isBusy() && robot.rightDriveMotor.isBusy())) {

				// Display it for the driver.
				telemetry.addData("Path1", "Running to %7d :%7d", newLeftTarget, newRightTarget);
				telemetry.addData("Path2", "Running at %7d :%7d",
						robot.leftDriveMotor.getCurrentPosition(),
						robot.rightDriveMotor.getCurrentPosition());
				telemetry.update();
			}

			// Stop all motion;
			robot.leftDriveMotor.setPower(0);
			robot.rightDriveMotor.setPower(0);

			// Turn off RUN_TO_POSITION
			robot.leftDriveMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
			robot.rightDriveMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
		}
	}
}
